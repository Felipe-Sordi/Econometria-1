#------------------------------------------Felipe De Sordi:


# Clear Workspace & Plots
rm(list=ls())


# Install and load packages
load.lib <- c("devtools","dplyr","quantmod","esquisse","readxl","ggplot2",
              "PerformanceAnalytics","stargazer","zoo","lubridate")
install.lib <- load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib) install.packages(lib,dependencies = TRUE)
sapply(load.lib, require, character = TRUE)

#==========================  Data set treatment  ==============================#

Prices = read_excel("/Users/felipe/Documents/FGV /PS-VELT/Fechamento.xlsx") %>% 
  mutate(Date = as.Date(Data),
         VELT = as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig VELT`), #converts price columns to numeric format
         CDI = as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig  CDI Acumulado`),
         IBOV = as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig IBOV`),
         `10Y T-Bond`= as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig   T-BOND 10Y`),
         PTAX = as.numeric(`Fechamento ajust p/ prov Ptax`),
         `IMA-Geral` = as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig IMA Geral`),
         `S&P 500` = as.numeric(`Fechamento\r\najust p/ prov\r\nEm moeda orig S&P500`),
         `USD/BRL` = 1/PTAX) %>% #calculates the exchange rate USD/BRL as the reciprocal of the PTAX
  select(Date, VELT, CDI, IBOV, `10Y T-Bond`, `IMA-Geral`, `S&P 500`, `USD/BRL`) %>% 
  na.omit()
  

#Returns DF

ret = function(x) {
  result = (x/lag(x)-1)
  return(result)
}

#Calculating returns
Returns = Prices %>% 
  mutate(VELT = ret(VELT),
         IBOV = ret(IBOV),
         CDI = ret(CDI),
         `IMA-Geral` = ret(`IMA-Geral`),
         `USD/BRL` = ret(`USD/BRL`),
         `S&P 500` = ret(`S&P 500`),
         `10Y T-Bond` = ret(`10Y T-Bond`)) %>% 
  na.omit()

#=========   Performance Assessment and Attribution Analysis  =================#

Returns_A = Returns %>% 
  mutate(exc_return = VELT - CDI, #excess return #excess returns
         Cum_Return = cumprod(1+VELT), #cumulative returns 
         Month = month(Date),
         Year = year(Date))  

#Returns and Volatility:



Total_return = (prod(1+Returns_A$VELT)-1) #Total Return
Total_exc_return = (prod(1+Returns_A$exc_return)-1)  #Total Excess Return
Annualized_return = ((1+Total_return)^(1/length(Returns_A$VELT/252))-1)
Annualized_exc_return = ((1+Total_exc_return)^(1/length(Returns_A$VELT/252))-1)

Vol_return = sd(Returns_A$VELT) #Volatility of returns
Vol_exc_return = sd(Returns_A$exc_return) #Volatility of excess returns
Annualized_vol_return = Vol_return*sqrt(252)
Annualized_vol_exc_return = Vol_exc_return*sqrt(252)

#Regression for Beta and JensenÂ´s Alpha:

exc_IBOV = Returns_A$IBOV - Returns_A$CDI

Reg = lm(Returns_A$exc_return ~ exc_IBOV)
Beta = coef(Reg)[2]

Jensens = coef(Reg)[1]*252 #Jens

#Risk-adjusted metrics:

Sharpe = Annualized_exc_return/Annualized_vol_exc_return
Treynor = Annualized_exc_return/Beta

Gamma = 2
T = length(Returns_A$VELT)
MRAR = ((1/T)*sum((1+Returns_A$VELT)/(1+Returns_A$CDI)^Gamma))^(12/Gamma) 

MDD = maxDrawdown(Returns_A$VELT)


# Store the metrics in a dataframe
Performance_Assessment = data.frame(
  Total_return = Total_return,
  Total_exc_return = Total_exc_return,
  Annualized_return = Annualized_return,
  Annualized_exc_return = Annualized_exc_return,
  Vol_return = Vol_return,
  Vol_exc_return = Vol_exc_return,
  Annualized_vol_return = Annualized_vol_return,
  Annualized_vol_exc_return = Annualized_vol_exc_return,
  Beta = Beta,
  Jensens_Alpha = Jensens, 
  Sharpe = Sharpe,
  Treynor = Treynor,
  MRAR = MRAR,
  Max_Drawdown = MDD
)
rownames(Performance_Assessment)= "VELT"

Reg = lm(VELT ~ IBOV +`IMA-Geral`+`USD/BRL`+ CDI +`S&P 500`+
           `10Y T-Bond`, Returns_A)

Performance_attribution = data.frame(
  Fund = c("VELT"),
  Alpha = coef(Reg)[1],
  Stocks = coef(Reg)[2],
  Fixed_income = coef(Reg)[3],
  Exchange_rate = coef(Reg)[4],
  Cash = coef(Reg)[5],
  Global_Equities = coef(Reg)[6],
  Global_interest_rate = coef(Reg)[7]
  
)


#Cumulative_returns comparison
Cumulative_Returns <- Returns_A %>%
  mutate(Cum_VELT = cumprod(1 + VELT),
         Cum_IBOV = cumprod(1 + IBOV),
         Cum_CDI = cumprod(1 + CDI) ) %>%
  select(Date, Cum_VELT, Cum_IBOV, Cum_CDI)

# Plotting the cumulative returns
ggplot(Cumulative_Returns, aes(x = Date)) +
  geom_line(aes(y = Cum_VELT, color = "VELT"), size = 1) +
  geom_line(aes(y = Cum_IBOV, color = "IBOV"), size = 1) +
  geom_line(aes(y = Cum_CDI, color = "CDI"), size = 1) +
  labs(title = "Cumulative Returns: VELT vs IBOV and CDI",
       x = "Date",
       y = "Cumulative Returns",
       color = "Legend") +
  theme_minimal()

#====================== Non-synchronous trading pricing =======================#


Returns_B = Returns_A %>% 
  mutate(exc_return_IBOV = IBOV-CDI, 
         lag_1 = lag(exc_return_IBOV, 1),
         lag_2 = lag(exc_return_IBOV, 2),
         lag_3 = lag(exc_return_IBOV, 3)) %>% 
  select(Date, VELT, exc_return, exc_return_IBOV, IBOV, lag_1, lag_2, lag_3) 
  

# Simple regression
Reg1 = lm(exc_return ~ exc_return_IBOV, Returns_B)
stargazer(Reg1, type = "text")
# Lagged betas regression
Reg2 = lm(exc_return ~ exc_return_IBOV  + lag_1 + lag_2 + lag_3, Returns_B)
stargazer(Reg2, type = "text")
True.Beta = sum(coef(Reg2)[2:5])

